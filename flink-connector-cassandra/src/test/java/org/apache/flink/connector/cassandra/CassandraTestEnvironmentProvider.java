package org.apache.flink.connector.cassandra;

import org.junit.jupiter.api.extension.Extension;
import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.api.extension.ParameterContext;
import org.junit.jupiter.api.extension.ParameterResolver;
import org.junit.jupiter.api.extension.TestTemplateInvocationContext;
import org.junit.jupiter.api.extension.TestTemplateInvocationContextProvider;
import org.testcontainers.containers.CassandraContainer;
import org.testcontainers.containers.GenericContainer;

import java.util.Collections;
import java.util.List;
import java.util.stream.Stream;

import static org.apache.flink.connector.cassandra.CassandraTestEnvironment.DOCKER_CASSANDRA_IMAGE;

/**
 * Provides test environments for running tests with different Cassandra-based containers. This
 * class implements the {@link TestTemplateInvocationContextProvider} interface to supply multiple
 * invocation contexts for test templates. The invocation contexts generated by this provider
 * represent various Cassandra environments, such as ScyllaDB or Cassandra containers, ensuring
 * tests can be run in diverse setups.
 */
public class CassandraTestEnvironmentProvider implements TestTemplateInvocationContextProvider {

    @Override
    public boolean supportsTestTemplate(ExtensionContext context) {
        return true;
    }

    @Override
    public Stream<TestTemplateInvocationContext> provideTestTemplateInvocationContexts(
            ExtensionContext context) {
        return cassandraTestEnvironments(true).map(CassandraTestInvocationContext::new);
    }

    private Stream<CassandraTestEnvironment> cassandraTestEnvironments(
            boolean insertTestDataForSplitSizeTests) {
        return Stream.of(
                new CassandraTestEnvironment(
                        new GenericContainer<>("scylladb/scylla:6.2"),
                        insertTestDataForSplitSizeTests),
                new CassandraTestEnvironment(
                        new CassandraContainer<>(DOCKER_CASSANDRA_IMAGE),
                        insertTestDataForSplitSizeTests));
    }

    private static class CassandraTestInvocationContext implements TestTemplateInvocationContext {
        private final CassandraTestEnvironment environment;

        public CassandraTestInvocationContext(CassandraTestEnvironment environment) {
            this.environment = environment;
        }

        @Override
        public String getDisplayName(int invocationIndex) {
            return String.format(
                    "Cassandra Test Environment: %s",
                    environment.getSession().getCluster().getClusterName());
        }

        @Override
        public List<Extension> getAdditionalExtensions() {
            return Collections.singletonList(
                    new ParameterResolver() {
                        @Override
                        public boolean supportsParameter(
                                ParameterContext parameterContext,
                                ExtensionContext extensionContext) {
                            return parameterContext
                                    .getParameter()
                                    .getType()
                                    .equals(CassandraTestEnvironment.class);
                        }

                        @Override
                        public Object resolveParameter(
                                ParameterContext parameterContext,
                                ExtensionContext extensionContext) {
                            return environment;
                        }
                    });
        }
    }
}
